{
  "hash": "0994c4f44b513f11b307ca661c296dde",
  "result": {
    "markdown": "---\ntitle: \"R functions\"\nauthor: \"Johan SÃ¡enz\"\ndate: \"05-01-2023\"\ncategories: [R, functions]\nformat:\n  html:\n    toc: true\n    toc-location: left\n    engine: knitr\n---\n\n```` css\n```{css echo=FALSE}\n.column {\ntext-align: center;\n}\n```\n````\n\n::: {.justify}\n\n# **Functions in R**\n\nR has multiple options that are useful for the analysis of microbiome data.\n\n![](r-function-types.png){fig-align=\"center\" width=\"200\"}\n\n## Set up functions\n\n[Get or Set Working Directory]{.underline}\n\n`setwd(dir)` is used to set the working directory to `dir`. `dir` would be consider the root folder.\n\nExample: `setwd(\"documents/project\")`\n\n[Install and load libraries]{.underline}\n\n`install.packages()` Download and install packages from CRAN-like repositories or from local files. This function must be use once if the require package is not installed.\n\n`library()` Load pre-install packages. This function must be use every time a new session starts\n\n## Load files functions\n\n`read.table()`Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file.\n\n`read_tsv()` and `read_csv()` are special cases of the more general `read_delim()`. They're useful for reading the most common types of flat file data, comma separated values and tab separated values, respectively.\n\n## Arithmetic functions\n\nmean()\n\nsum()\n\nsd()\n\nmax()\n\nmin()\n\n## ggplot functions\n\n`ggplot()` initializes a ggplot object. It can be used to declare the input data frame for a graphic and to specify the set of plot aesthetics intended to be common throughout all subsequent layers unless specifically overridden.\n\n[geom functions]{.underline}\n\nThere are different functions to represent geometric figures or more specifically types of graphs. The most common type of figures are: `geom_bar()`, `geom_boxplot()`, `geom_line()`, `geom_point().` You can check all types here [ggplot2](https://ggplot2.tidyverse.org)\n\n![](barplot.png){fig-align=\"center\"}\n\nLets take barplots as examples. There are two types of bar charts: `geom_bar()` and `geom_col()`. `geom_bar()` makes the height of the bar proportional to the number of cases in each group (or if the `weight` aesthetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use `geom_col()` instead.\n\n[Scale functions]{.underline}\n\nThere are different functions to represent the scales of the data in the plots using R. Those functions can be applied to the x or y axis. The most common type of scales are: `scale_x_continuous()`, `scale_y_continuous()`, `scale_x_discrete()`, `scale_y_discrete()`, `scale_x_log10()`, `scale_y_log10()`.\n\nThe function `scale_y_continuous()` can be use to format the y-axis of a continuous variable. For example you can introduce `breaks` and `limits`.\n\n`labs()` Modify axis, legend, and plot labels. Good labels are critical for making your plots accessible to a wider audience. Always ensure the axis and legend labels display the full variable name. Use the plot `title` and `subtitle` to explain the main findings. It's common to use the `caption` to provide information about the data source. `tag` can be used for adding identification tags to differentiate between multiple plots.\n\n[Themes]{.underline}\n\n## Tidyverse functions\n\nrename()\n\npivot_longer()\n\npivot_wider()\n\ngroup_by()\n\nsummarize()\n\nmutate()\n\n:::\n\n",
    "supporting": [
      "functions_files"
    ],
    "filters": [],
    "includes": {}
  }
}