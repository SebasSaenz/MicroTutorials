{
  "hash": "624b22184cdc841e0ca806cf377bf03c",
  "result": {
    "markdown": "---\ntitle: \"R functions\"\nauthor: \n  - name: Johan S. Sáenz \n    affiliations: University of Hohenheim\ndate: \"05-01-2023\"\ncategories: [R, functions]\nformat:\n   pdf:\n    toc: true\n    keep-tex: true\n    number-sections: true\n    colorlinks: true\n    fig-pos: 'h'\n   html:\n    toc: true\n    toc-location: left\n---\n\n\n# **Functions in R**\n\nA function is a set of arguments organized together to perform a specific task. R has a large number of in-built functions and the user can create their own functions.\n\nThe different parts of a function are −\n\n-   **Function Name** − This is the actual name of the function. It is stored in R environment as an object with this name.\n\n-   **Arguments** − An argument is a placeholder. When a function is invoked, you pass a value to the argument. Arguments are optional; that is, a function may contain no arguments. Also arguments can have default values.\n\n-   **Function Body** − The function body contains a collection of statements that defines what the function does.\n\n-   **Return Value** − The return value of a function is the last expression in the function body to be evaluated.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    function_name <- function(arg_1, arg_2, ...) {\n       Function_body  = arg_1\n    }\n    ```\n    :::\n\n\n## Set up functions\n\n[Get or Set Working Directory]{.underline}\n\n`setwd(dir)` is used to set the working directory to `dir`. `dir` would be consider the root folder.\n\nExample: `setwd(\"documents/project\")`\n\n[Install and load libraries]{.underline}\n\n`install.packages()` Download and install packages from CRAN-like repositories or from local files. This function must be use once if the require package is not installed.\n\n`library()` Load pre-install packages. This function must be use every time a new session starts\n\n## Load files functions\n\n`read.table()`Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file.\n\n`read_tsv()` and `read_csv()` are special cases of the more general `read_delim()`. They're useful for reading the most common types of flat file data, comma separated values and tab separated values, respectively.\n\n## Arithmetic functions\n\nmean()\n\nsum()\n\nsd()\n\nmax()\n\nmin()\n\n## ggplot functions\n\n`ggplot()` initializes a ggplot object. It can be used to declare the input data frame for a graphic and to specify the set of plot aesthetics intended to be common throughout all subsequent layers unless specifically overridden.\n\n[geom functions]{.underline}\n\nThere are different functions to represent geometric figures or more specifically types of graphs. The most common type of figures are: `geom_bar()`, `geom_boxplot()`, `geom_line()`, `geom_point().` You can check all types here [ggplot2](https://ggplot2.tidyverse.org)\n\n![](barplot.png){fig-align=\"center\"}\n\nLets take barplots as examples. There are two types of bar charts: `geom_bar()` and `geom_col()`. `geom_bar()` makes the height of the bar proportional to the number of cases in each group (or if the `weight` aesthetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use `geom_col()` instead.\n\n[Scale functions]{.underline}\n\nThere are different functions to represent the scales of the data in the plots using R. Those functions can be applied to the x or y axis. The most common type of scales are: `scale_x_continuous()`, `scale_y_continuous()`, `scale_x_discrete()`, `scale_y_discrete()`, `scale_x_log10()`, `scale_y_log10()`.\n\nThe function `scale_y_continuous()` can be use to format the y-axis of a continuous variable. For example you can introduce `breaks` and `limits`.\n\n`labs()` Modify axis, legend, and plot labels. Good labels are critical for making your plots accessible to a wider audience. Always ensure the axis and legend labels display the full variable name. Use the plot `title` and `subtitle` to explain the main findings. It's common to use the `caption` to provide information about the data source. `tag` can be used for adding identification tags to differentiate between multiple plots.\n\n[Themes]{.underline}\n\n## Tidyverse functions\n\nrename()\n\npivot_longer()\n\npivot_wider()\n\ngroup_by()\n\nsummarize()\n\nmutate()\n",
    "supporting": [
      "functions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}