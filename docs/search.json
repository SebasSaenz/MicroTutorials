[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MicroTutorials",
    "section": "",
    "text": "Ordination plot- Beta diveristy\n\n\n\n\n\n\n\nR\n\n\nfunctions\n\n\n\n\n\n\n\n\n\n\n\nMar 6, 2024\n\n\nJohan S. Sáenz\n\n\n\n\n\n\n  \n\n\n\n\nQuality control metaproteomics\n\n\n\n\n\n\n\nR\n\n\nmetaproteomics\n\n\n\n\n\n\n\n\n\n\n\nMay 5, 2023\n\n\nJohan S. Sáenz\n\n\n\n\n\n\n  \n\n\n\n\nWorking space set-up\n\n\n\n\n\n\n\nR\n\n\nfunctions\n\n\n\n\n\n\n\n\n\n\n\nMay 4, 2023\n\n\nJohan Sáenz\n\n\n\n\n\n\n  \n\n\n\n\nR functions\n\n\n\n\n\n\n\nR\n\n\nfunctions\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2023\n\n\nJohan S. Sáenz\n\n\n\n\n\n\n  \n\n\n\n\nR Installation\n\n\n\n\n\n\n\nR\n\n\nInstallation\n\n\n\n\n\n\n\n\n\n\n\nApr 30, 2023\n\n\nJohan S. Sáenz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "MicroTutorials",
    "section": "",
    "text": "MicroTutorials\nThe Microtutorials blog contains several guides, which describe how to analyse microbiome data mainly using R. The tutorials are specifically designed for master students of the Hohenheim University without previous programming or data analysis knowledge. The data and the code were generated for the course “Interaktionen Mikrobiom-Nutztier” designed by Prof. Jana Seifert and Johan S. Sáenz.\nPlease explore the blog and reach out if you have any comments. If you want to know more about our research have a look at the HOLMIR website. Drawings display in the website were drawn by me, you can use them but give me (Johan S. Sáenz) the corresponding credit."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The Microtutorials blog contains several guides, which describe how to analyse microbiome data mainly using R. The tutorials are specifically designed for master students of the Hohenheim University without previous programming or data analysis knowledge. The data and the code were generated for the course “Interaktionen Mikrobiom-Nutztier” designed by Prof. Jana Seifert and Johan S. Sáenz.\nPlease explore the blog and reach out if you have any comments. If you want to know more about our research have a look at the HOLMIR website. Drawings display in the website were drawn by me, you can use them but give me (Johan S. Sáenz) the corresponding credit."
  },
  {
    "objectID": "posts/ordination/ordination.html",
    "href": "posts/ordination/ordination.html",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "This tutorial would describe how to perform a Non-metric MultiDimensional Scaling (NMDS) ordination analysis, based on the total protein groups identified in a metaproteomics experiment. NMDS is a distance-based ordination technique, which summarizes the differences or similarities between each pair of sample using any number of response variables. This technique is broadly use in Microbial ecology and metagenomic, metatrascriptomics, metaproteomics and metabolomic analysis. For more details on ordiantion analysis please read Multivariate analyses in microbial ecology and PCoA & NMDS.\nFor the following analysis we require two data frames 1) metadata describing each sample metadata_metapro.txt and 2) the intensity of the different protein groups across the samples final_proteins.tsv. The protein groups data frame was obtained running a set of metaproteomic raw files in the iMetaLab software.\n\n\n\n# libraries ----------------------\nlibrary(tidyverse)\nlibrary(vegan)\n\n# data------------------\ndf_proteins &lt;- read_tsv(\"../../project/rawdata/final_proteins.tsv\")\n\nmetadata &lt;- read.table(file = \"../../project/rawdata/metadata_metapro.txt\",\n                       header = TRUE,\n                       sep = \"\\t\",\n                       check.names = FALSE)\n\n\n\n\nFirst we need to clean our metadata. This specific dataframe has some issues that can create noise during the analysis:\n\nBad variable naming\nThe variable rawfiles contain dots (.)\nThe variable Abschnitt contains spaces and correspond to more than one variable.\n\nWe can solve this problems: 1) first renaming the variables using the function rename(), 2) then we can replace the dots (.) for underscores using the functions mutate() and str_replace(), and finally 3) we can separate the variable section into two new variables using the function separate().\n\nmetadata &lt;- read.table(file = \"../../project/rawdata/metadata_metapro.txt\",\n                       header = TRUE,\n                       sep = \"\\t\",\n                       check.names = FALSE) %&gt;% \n  rename(rawfile=Probenname, section=Abschnitt) %&gt;% \n  mutate(rawfile = str_replace(rawfile, \"\\\\.\", \"_\")) %&gt;% \n  separate(section,\n           into = c(\"section\", \"origin\"),\n           sep = \"\\\\s\") \n\nmetadata[1:5,]\n\n  rawfile  section  origin\n1     9_1  Stomach Digesta\n2     9_3  Stomach  Mucosa\n3     9_4  Stomach  Mucosa\n4     9_5  Stomach  Mucosa\n5     9_6 Duodenum Digesta\n\n\n\n\n\n\nrel_abundance_df &lt;- df_proteins %&gt;%\n  rename(proteinid = `Protein IDs`) %&gt;% \n  select(proteinid, contains(\"Intensity\"), -Intensity) %&gt;% \n  pivot_longer(-proteinid, names_to = \"rawfile\", values_to = \"intensity\") %&gt;%\n  mutate(intensity = as.numeric(intensity),\n         rawfile = str_remove(rawfile, \"Intensity \")) %&gt;% \n  group_by(rawfile) %&gt;% \n  mutate(rel_abundance = 100*(intensity/sum(intensity))) %&gt;%\n  select(proteinid, rawfile, rel_abundance) %&gt;% \n  pivot_wider(names_from = rawfile, values_from = rel_abundance)\n\n\n\n\n\n# Create a matrix and transpose data--------------\nmatrix &lt;- rel_abundance_df[2:21] %&gt;% \n  t()\n\n\n\n\n\n#Calculate distance -----------------\nnmds1 &lt;- metaMDS(matrix,  #perform nmds\n                 distance = \"bray\", \n                 try = 20, \n                 trymax = 100, \n                 maxit = 1000, \n                 k = 3)\n\nRun 0 stress 0.0393017 \nRun 1 stress 0.03930164 \n... New best solution\n... Procrustes: rmse 0.000159104  max resid 0.0003476246 \n... Similar to previous best\nRun 2 stress 0.04066654 \nRun 3 stress 0.03930173 \n... Procrustes: rmse 0.0001697639  max resid 0.0003891454 \n... Similar to previous best\nRun 4 stress 0.05920848 \nRun 5 stress 0.05922803 \nRun 6 stress 0.1882621 \nRun 7 stress 0.04063187 \nRun 8 stress 0.04066681 \nRun 9 stress 0.0425669 \nRun 10 stress 0.04066647 \nRun 11 stress 0.04063228 \nRun 12 stress 0.03930165 \n... Procrustes: rmse 0.0001042094  max resid 0.00020394 \n... Similar to previous best\nRun 13 stress 0.04063213 \nRun 14 stress 0.04063194 \nRun 15 stress 0.04063198 \nRun 16 stress 0.03930161 \n... New best solution\n... Procrustes: rmse 3.433133e-05  max resid 7.765347e-05 \n... Similar to previous best\nRun 17 stress 0.04063211 \nRun 18 stress 0.04063201 \nRun 19 stress 0.04066651 \nRun 20 stress 0.03980541 \n*** Best solution repeated 1 times\n\n\n\n\n\nUsing some vegan functions we can check the raw plot of our ordination and how good the analysis fot to our data. It is recommended that the stress of the analysis is lower than 0.2\n\n# qc checking\nordiplot(nmds1, display = \"sites\")\n\n\n\nnmds1$stress  \n\n[1] 0.03930161\n\nstressplot(nmds1)\n\n\n\n\nLarge scatter around the line suggests that original dissimilarities are not well preserved in the reduced number of dimensions. Looks pretty good in this case\n\n\n\nWe need to extract the scores from the NMDS and combined them with the metadata. In this way we can label each of our samples based on their metadata.\n\n#Extracting scores\ndata_scores &lt;- as.data.frame(scores(nmds1, display=c(\"sites\")))\n\n#Addd metadata to dataframe\ndata_scores$rawfile &lt;- as.character(row.names(data_scores)) \n\n#joing metadata with nmds scorres\ndata_nmds &lt;- left_join(data_scores, metadata, by = \"rawfile\")\n\ndata_nmds$section &lt;- factor(data_nmds$section,\n                             levels = c(\"Caecum\", \"Jejunum\"))#Extracting scores\n\n\n\n\n\ndata_nmds %&gt;%\n  ggplot() +\n  geom_point(aes(x = NMDS1,\n                 y = NMDS2,\n                 colour =section),\n             size = 4\n             #alpha = 0.7\n  ) +\n  scale_color_manual(values = c('#66C2A5','#FC8D62')) +\n  theme_classic() +\n  theme(panel.background = element_blank(), #remove background\n        panel.grid.major = element_blank(), #remove grid\n        panel.grid.minor = element_blank(),#remove grid\n        legend.title = element_blank(),\n        legend.text = element_text(size=12),\n        legend.position = \"top\") #remove legend title"
  },
  {
    "objectID": "posts/ordination/ordination.html#set-up-working-space-and-load-data",
    "href": "posts/ordination/ordination.html#set-up-working-space-and-load-data",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "# libraries ----------------------\nlibrary(tidyverse)\nlibrary(vegan)\n\n# data------------------\ndf_proteins &lt;- read_tsv(\"../../project/rawdata/final_proteins.tsv\")\n\nmetadata &lt;- read.table(file = \"../../project/rawdata/metadata_metapro.txt\",\n                       header = TRUE,\n                       sep = \"\\t\",\n                       check.names = FALSE)"
  },
  {
    "objectID": "posts/ordination/ordination.html#cleaning-metadata",
    "href": "posts/ordination/ordination.html#cleaning-metadata",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "First we need to clean our metadata. This specific dataframe has some issues that can create noise during the analysis:\n\nBad variable naming\nThe variable rawfiles contain dots (.)\nThe variable Abschnitt contains spaces and correspond to more than one variable.\n\nWe can solve this problems: 1) first renaming the variables using the function rename(), 2) then we can replace the dots (.) for underscores using the functions mutate() and str_replace(), and finally 3) we can separate the variable section into two new variables using the function separate().\n\nmetadata &lt;- read.table(file = \"../../project/rawdata/metadata_metapro.txt\",\n                       header = TRUE,\n                       sep = \"\\t\",\n                       check.names = FALSE) %&gt;% \n  rename(rawfile=Probenname, section=Abschnitt) %&gt;% \n  mutate(rawfile = str_replace(rawfile, \"\\\\.\", \"_\")) %&gt;% \n  separate(section,\n           into = c(\"section\", \"origin\"),\n           sep = \"\\\\s\") \n\nmetadata[1:5,]\n\n  rawfile  section  origin\n1     9_1  Stomach Digesta\n2     9_3  Stomach  Mucosa\n3     9_4  Stomach  Mucosa\n4     9_5  Stomach  Mucosa\n5     9_6 Duodenum Digesta"
  },
  {
    "objectID": "posts/ordination/ordination.html#calculate-protein-relative-abundance",
    "href": "posts/ordination/ordination.html#calculate-protein-relative-abundance",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "rel_abundance_df &lt;- df_proteins %&gt;%\n  rename(proteinid = `Protein IDs`) %&gt;% \n  select(proteinid, contains(\"Intensity\"), -Intensity) %&gt;% \n  pivot_longer(-proteinid, names_to = \"rawfile\", values_to = \"intensity\") %&gt;%\n  mutate(intensity = as.numeric(intensity),\n         rawfile = str_remove(rawfile, \"Intensity \")) %&gt;% \n  group_by(rawfile) %&gt;% \n  mutate(rel_abundance = 100*(intensity/sum(intensity))) %&gt;%\n  select(proteinid, rawfile, rel_abundance) %&gt;% \n  pivot_wider(names_from = rawfile, values_from = rel_abundance)"
  },
  {
    "objectID": "posts/ordination/ordination.html#transform-the-protein-groups-data-frame",
    "href": "posts/ordination/ordination.html#transform-the-protein-groups-data-frame",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "# Create a matrix and transpose data--------------\nmatrix &lt;- rel_abundance_df[2:21] %&gt;% \n  t()"
  },
  {
    "objectID": "posts/ordination/ordination.html#non-metric-multidimensional-scaling-nmds",
    "href": "posts/ordination/ordination.html#non-metric-multidimensional-scaling-nmds",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "#Calculate distance -----------------\nnmds1 &lt;- metaMDS(matrix,  #perform nmds\n                 distance = \"bray\", \n                 try = 20, \n                 trymax = 100, \n                 maxit = 1000, \n                 k = 3)\n\nRun 0 stress 0.0393017 \nRun 1 stress 0.03930164 \n... New best solution\n... Procrustes: rmse 0.000159104  max resid 0.0003476246 \n... Similar to previous best\nRun 2 stress 0.04066654 \nRun 3 stress 0.03930173 \n... Procrustes: rmse 0.0001697639  max resid 0.0003891454 \n... Similar to previous best\nRun 4 stress 0.05920848 \nRun 5 stress 0.05922803 \nRun 6 stress 0.1882621 \nRun 7 stress 0.04063187 \nRun 8 stress 0.04066681 \nRun 9 stress 0.0425669 \nRun 10 stress 0.04066647 \nRun 11 stress 0.04063228 \nRun 12 stress 0.03930165 \n... Procrustes: rmse 0.0001042094  max resid 0.00020394 \n... Similar to previous best\nRun 13 stress 0.04063213 \nRun 14 stress 0.04063194 \nRun 15 stress 0.04063198 \nRun 16 stress 0.03930161 \n... New best solution\n... Procrustes: rmse 3.433133e-05  max resid 7.765347e-05 \n... Similar to previous best\nRun 17 stress 0.04063211 \nRun 18 stress 0.04063201 \nRun 19 stress 0.04066651 \nRun 20 stress 0.03980541 \n*** Best solution repeated 1 times"
  },
  {
    "objectID": "posts/ordination/ordination.html#check-the-ordination-analysis",
    "href": "posts/ordination/ordination.html#check-the-ordination-analysis",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "Using some vegan functions we can check the raw plot of our ordination and how good the analysis fot to our data. It is recommended that the stress of the analysis is lower than 0.2\n\n# qc checking\nordiplot(nmds1, display = \"sites\")\n\n\n\nnmds1$stress  \n\n[1] 0.03930161\n\nstressplot(nmds1)\n\n\n\n\nLarge scatter around the line suggests that original dissimilarities are not well preserved in the reduced number of dimensions. Looks pretty good in this case"
  },
  {
    "objectID": "posts/ordination/ordination.html#extract-the-ndms-scores",
    "href": "posts/ordination/ordination.html#extract-the-ndms-scores",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "We need to extract the scores from the NMDS and combined them with the metadata. In this way we can label each of our samples based on their metadata.\n\n#Extracting scores\ndata_scores &lt;- as.data.frame(scores(nmds1, display=c(\"sites\")))\n\n#Addd metadata to dataframe\ndata_scores$rawfile &lt;- as.character(row.names(data_scores)) \n\n#joing metadata with nmds scorres\ndata_nmds &lt;- left_join(data_scores, metadata, by = \"rawfile\")\n\ndata_nmds$section &lt;- factor(data_nmds$section,\n                             levels = c(\"Caecum\", \"Jejunum\"))#Extracting scores"
  },
  {
    "objectID": "posts/ordination/ordination.html#create-a-plot-with-ggplot",
    "href": "posts/ordination/ordination.html#create-a-plot-with-ggplot",
    "title": "Ordination plot- Beta diveristy",
    "section": "",
    "text": "data_nmds %&gt;%\n  ggplot() +\n  geom_point(aes(x = NMDS1,\n                 y = NMDS2,\n                 colour =section),\n             size = 4\n             #alpha = 0.7\n  ) +\n  scale_color_manual(values = c('#66C2A5','#FC8D62')) +\n  theme_classic() +\n  theme(panel.background = element_blank(), #remove background\n        panel.grid.major = element_blank(), #remove grid\n        panel.grid.minor = element_blank(),#remove grid\n        legend.title = element_blank(),\n        legend.text = element_text(size=12),\n        legend.position = \"top\") #remove legend title"
  },
  {
    "objectID": "posts/qc_metaproteomics/qc_metaproteomics.html",
    "href": "posts/qc_metaproteomics/qc_metaproteomics.html",
    "title": "Quality control metaproteomics",
    "section": "",
    "text": "## libraries\nlibrary(tidyverse)\n\n\n# input data\n\n# Metaproteomics quality control data from MaxQuant\ndf_qc &lt;- read.table(\"../../project/rawdata/final_summary.tsv\",\n                    header = TRUE,\n                    sep = \"\\t\",\n                    check.names = FALSE)\n# Metadata\nmetadata &lt;- read.table(\"../../project/rawdata/metadata_metapro.txt\",\n                       header = TRUE,\n                       sep = \"\\t\"\n                       )\n\n\n\n\n\nmetadata_clean &lt;- metadata %&gt;%\n  rename(sample = Probenname) %&gt;%\n  mutate(sample = str_replace_all(sample, \"\\\\.\", \"_\")) %&gt;%\n  separate(Abschnitt,\n    into = c(\"region\", \"source\",\n      sep = \" \"\n    )\n  )\n\n\n\n\n\nclean_qc &lt;- df_qc %&gt;%\n  select(\n    \"Raw file\",\n    \"Peptide Sequences Identified\",\n    \"MS/MS Identified\",\n    \"MS/MS Identified [%]\"\n  ) %&gt;%\n  rename(\n    sample = \"Raw file\",\n    peptide_identified = \"Peptide Sequences Identified\",\n    ms_identified = \"MS/MS Identified\",\n    ms_identified_perc = \"MS/MS Identified [%]\"\n  ) %&gt;%\n  filter(sample != \"Total\")\n\n\n\n\n\nmax(clean_qc$peptide_identified)\n\n[1] 27841\n\nsapply(clean_qc[2:4], mean)\n\npeptide_identified      ms_identified ms_identified_perc \n         10646.400          17453.600             26.159 \n\nsummary_table &lt;- data.frame(\n  stats = c(\"Max\", \"Mean\", \"Min\"),\n  peptide_identified = round(c(25687.0, 11420.1500, 472.00)),\n  ms_identified = round(c(28442.0, 13235.5000, 766.00)),\n  ms_identified_perc = round(c(29.9, 14.8755, 0.98), 2)\n)\n\nsummary_table\n\n  stats peptide_identified ms_identified ms_identified_perc\n1   Max              25687         28442              29.90\n2  Mean              11420         13236              14.88\n3   Min                472           766               0.98\n\nwrite.csv(summary_table, \"../../project/rawdata/summary.csv\")\n\n\n\n\n\npivoted_data &lt;- clean_qc %&gt;%\n  pivot_longer(-(sample), names_to = \"qc\", values_to = \"value\")\n\nhead(pivoted_data)\n\n# A tibble: 6 × 3\n  sample qc                    value\n  &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n1 10_1   peptide_identified   642   \n2 10_1   ms_identified       1045   \n3 10_1   ms_identified_perc     1.96\n4 10_18  peptide_identified 24411   \n5 10_18  ms_identified      36628   \n6 10_18  ms_identified_perc    54.6 \n\n\n\n\n\n\n pivoted_data %&gt;%\n  filter(qc==\"peptide_identified\") %&gt;% \n   ggplot(aes(x=value,\n             y=sample)) +\n  geom_bar(stat = \"identity\") +\n  geom_vline(aes(xintercept=mean(value)),\n              color=\"blue\", linetype=\"dashed\") +\n  scale_x_continuous(expand = c(0,0),\n                     limits = c(0, 29000),\n                     breaks=seq(0, 29000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  theme_classic()\n\n\n\n pivoted_data %&gt;%\n   filter(qc==\"peptide_identified\") %&gt;%\n  ggplot(aes(x=sample,\n             y=value)) +\n  geom_point(size=4)+\n  geom_hline(aes(yintercept=mean(value)),\n             color=\"blue\", linetype=\"dashed\") +\n  scale_y_continuous(expand = c(0,0),\n                     limits = c(0, 27000),\n                     breaks=seq(0, 27000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  theme_classic()\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n pivoted_data %&gt;%\n  filter(qc==\"peptide_identified\") %&gt;%\n  ggplot(aes(x=\"peptides\",\n             y=value)) +\n  geom_boxplot(width = 0.3)+ \n  geom_jitter(width = 0.1,\n              size = 3,\n              color = \"red\",\n              alpha = 0.6) +\n  scale_y_continuous(expand = c(0,0),\n                     limits = c(0, 29000),\n                     breaks=seq(0, 29000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  theme_classic()\n\n\n\n\n\n pivoted_data %&gt;%\n  filter(qc==\"peptide_identified\") %&gt;%\n  inner_join(metadata_clean, by=\"sample\") %&gt;%\n  ggplot(aes(x=region,\n             y=value,\n             color=region)) +\n  geom_boxplot(width = 0.3,\n               outlier.shape = NA, \n               show.legend = FALSE)+ \n  geom_jitter(width= 0.1,\n              size=3, \n              show.legend = FALSE,\n              alpha = 0.6) +\n  scale_y_continuous(expand = c(0,0),\n                     limits = c(0, 30000),\n                     breaks=seq(0, 30000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  scale_color_manual(values = c(\"red\", \"blue\")) +\n  theme_classic()\n\n\n\n\n\n pivoted_data %&gt;%\n   inner_join(metadata_clean, \n              by = \"sample\"\n              ) %&gt;%\n   ggplot(aes(x = region,\n              y = value,\n              color = region\n              )\n          ) +\n   geom_boxplot(outlier.shape = NA, \n                show.legend = FALSE\n                ) +\n   geom_jitter(size = 3,\n               show.legend = FALSE\n               ) +\n   scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 27000),\n                      # breaks=seq(0, 27000, by=3000)\n                      ) +\n   labs(x = \"\",\n        y = \"Number of identified peptides\"\n        ) +\n   scale_color_manual(values = c(\"red\", \"blue\")\n                      ) +\n   theme_classic() +\n   facet_wrap(~qc, \n              scales = \"free\"\n              )"
  },
  {
    "objectID": "posts/qc_metaproteomics/qc_metaproteomics.html#set-up-environment",
    "href": "posts/qc_metaproteomics/qc_metaproteomics.html#set-up-environment",
    "title": "Quality control metaproteomics",
    "section": "",
    "text": "## libraries\nlibrary(tidyverse)\n\n\n# input data\n\n# Metaproteomics quality control data from MaxQuant\ndf_qc &lt;- read.table(\"../../project/rawdata/final_summary.tsv\",\n                    header = TRUE,\n                    sep = \"\\t\",\n                    check.names = FALSE)\n# Metadata\nmetadata &lt;- read.table(\"../../project/rawdata/metadata_metapro.txt\",\n                       header = TRUE,\n                       sep = \"\\t\"\n                       )"
  },
  {
    "objectID": "posts/qc_metaproteomics/qc_metaproteomics.html#clean-metadata",
    "href": "posts/qc_metaproteomics/qc_metaproteomics.html#clean-metadata",
    "title": "Quality control metaproteomics",
    "section": "",
    "text": "metadata_clean &lt;- metadata %&gt;%\n  rename(sample = Probenname) %&gt;%\n  mutate(sample = str_replace_all(sample, \"\\\\.\", \"_\")) %&gt;%\n  separate(Abschnitt,\n    into = c(\"region\", \"source\",\n      sep = \" \"\n    )\n  )"
  },
  {
    "objectID": "posts/qc_metaproteomics/qc_metaproteomics.html#clean-quality-data",
    "href": "posts/qc_metaproteomics/qc_metaproteomics.html#clean-quality-data",
    "title": "Quality control metaproteomics",
    "section": "",
    "text": "clean_qc &lt;- df_qc %&gt;%\n  select(\n    \"Raw file\",\n    \"Peptide Sequences Identified\",\n    \"MS/MS Identified\",\n    \"MS/MS Identified [%]\"\n  ) %&gt;%\n  rename(\n    sample = \"Raw file\",\n    peptide_identified = \"Peptide Sequences Identified\",\n    ms_identified = \"MS/MS Identified\",\n    ms_identified_perc = \"MS/MS Identified [%]\"\n  ) %&gt;%\n  filter(sample != \"Total\")"
  },
  {
    "objectID": "posts/qc_metaproteomics/qc_metaproteomics.html#create-a-summary-table",
    "href": "posts/qc_metaproteomics/qc_metaproteomics.html#create-a-summary-table",
    "title": "Quality control metaproteomics",
    "section": "",
    "text": "max(clean_qc$peptide_identified)\n\n[1] 27841\n\nsapply(clean_qc[2:4], mean)\n\npeptide_identified      ms_identified ms_identified_perc \n         10646.400          17453.600             26.159 \n\nsummary_table &lt;- data.frame(\n  stats = c(\"Max\", \"Mean\", \"Min\"),\n  peptide_identified = round(c(25687.0, 11420.1500, 472.00)),\n  ms_identified = round(c(28442.0, 13235.5000, 766.00)),\n  ms_identified_perc = round(c(29.9, 14.8755, 0.98), 2)\n)\n\nsummary_table\n\n  stats peptide_identified ms_identified ms_identified_perc\n1   Max              25687         28442              29.90\n2  Mean              11420         13236              14.88\n3   Min                472           766               0.98\n\nwrite.csv(summary_table, \"../../project/rawdata/summary.csv\")"
  },
  {
    "objectID": "posts/qc_metaproteomics/qc_metaproteomics.html#pivot-data",
    "href": "posts/qc_metaproteomics/qc_metaproteomics.html#pivot-data",
    "title": "Quality control metaproteomics",
    "section": "",
    "text": "pivoted_data &lt;- clean_qc %&gt;%\n  pivot_longer(-(sample), names_to = \"qc\", values_to = \"value\")\n\nhead(pivoted_data)\n\n# A tibble: 6 × 3\n  sample qc                    value\n  &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n1 10_1   peptide_identified   642   \n2 10_1   ms_identified       1045   \n3 10_1   ms_identified_perc     1.96\n4 10_18  peptide_identified 24411   \n5 10_18  ms_identified      36628   \n6 10_18  ms_identified_perc    54.6"
  },
  {
    "objectID": "posts/qc_metaproteomics/qc_metaproteomics.html#plot-the-data",
    "href": "posts/qc_metaproteomics/qc_metaproteomics.html#plot-the-data",
    "title": "Quality control metaproteomics",
    "section": "",
    "text": "pivoted_data %&gt;%\n  filter(qc==\"peptide_identified\") %&gt;% \n   ggplot(aes(x=value,\n             y=sample)) +\n  geom_bar(stat = \"identity\") +\n  geom_vline(aes(xintercept=mean(value)),\n              color=\"blue\", linetype=\"dashed\") +\n  scale_x_continuous(expand = c(0,0),\n                     limits = c(0, 29000),\n                     breaks=seq(0, 29000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  theme_classic()\n\n\n\n pivoted_data %&gt;%\n   filter(qc==\"peptide_identified\") %&gt;%\n  ggplot(aes(x=sample,\n             y=value)) +\n  geom_point(size=4)+\n  geom_hline(aes(yintercept=mean(value)),\n             color=\"blue\", linetype=\"dashed\") +\n  scale_y_continuous(expand = c(0,0),\n                     limits = c(0, 27000),\n                     breaks=seq(0, 27000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  theme_classic()\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n pivoted_data %&gt;%\n  filter(qc==\"peptide_identified\") %&gt;%\n  ggplot(aes(x=\"peptides\",\n             y=value)) +\n  geom_boxplot(width = 0.3)+ \n  geom_jitter(width = 0.1,\n              size = 3,\n              color = \"red\",\n              alpha = 0.6) +\n  scale_y_continuous(expand = c(0,0),\n                     limits = c(0, 29000),\n                     breaks=seq(0, 29000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  theme_classic()\n\n\n\n\n\n pivoted_data %&gt;%\n  filter(qc==\"peptide_identified\") %&gt;%\n  inner_join(metadata_clean, by=\"sample\") %&gt;%\n  ggplot(aes(x=region,\n             y=value,\n             color=region)) +\n  geom_boxplot(width = 0.3,\n               outlier.shape = NA, \n               show.legend = FALSE)+ \n  geom_jitter(width= 0.1,\n              size=3, \n              show.legend = FALSE,\n              alpha = 0.6) +\n  scale_y_continuous(expand = c(0,0),\n                     limits = c(0, 30000),\n                     breaks=seq(0, 30000, by=3000)) +\n  labs(x=\"\",\n       y=\"Number of identified peptides\") +\n  scale_color_manual(values = c(\"red\", \"blue\")) +\n  theme_classic()\n\n\n\n\n\n pivoted_data %&gt;%\n   inner_join(metadata_clean, \n              by = \"sample\"\n              ) %&gt;%\n   ggplot(aes(x = region,\n              y = value,\n              color = region\n              )\n          ) +\n   geom_boxplot(outlier.shape = NA, \n                show.legend = FALSE\n                ) +\n   geom_jitter(size = 3,\n               show.legend = FALSE\n               ) +\n   scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 27000),\n                      # breaks=seq(0, 27000, by=3000)\n                      ) +\n   labs(x = \"\",\n        y = \"Number of identified peptides\"\n        ) +\n   scale_color_manual(values = c(\"red\", \"blue\")\n                      ) +\n   theme_classic() +\n   facet_wrap(~qc, \n              scales = \"free\"\n              )"
  },
  {
    "objectID": "posts/setup/setup.html",
    "href": "posts/setup/setup.html",
    "title": "Working space set-up",
    "section": "",
    "text": "Working space set-up\nThe most important thing to do before starting a new project is to set up the working space. In this blog I will describe the steps that I follow and work for me but it is not the only way. So if you find new ways to set-up your working space feel free to do it.\n\n\nFolder structure\n\nFirst of all, you should create a main folder with the name of the project and inside, you should create three sub folders call: rawdata, code and figures. The names of the folders indicate the type of file that would be stored in each of them. Sometimes I also create a folder call processed_data, when I want to save intermediate files. The file in the raw data must not be modified during the analysis.\n\n\n\n\n\n\n\nNext, You should move the raw data to the respective folder.\nAfter, You should create a new R script and then Save as… inside the code folder. I always give meaningful names to my files. Those names are based on the main goal of the script. For example if it is to create a bar plot, I name the file barplot.R\n\n\n\n\n\n\n\n\nWorking directory\n\nFollowing, You should open the new R script and use the symbol # to add some comments to the file. The # indicates that the line would not be run by R. The # is quite useful as you can add different comments to help you and other people to understand your code.\n# Author: Johan S. Sáenz\n# Email: johan.saenzmedina@uni-hohenheim.de\n# info: script to create a barplot\nThen, you should select the working directory in the Session menu. You should select your project folder. You will notice that in the console the following code was printed: setwd(\"/Users/sebastiansaenz/Documents/github/MicroTutorials/project\"). Copy the code and paste it in your script. Add a comment indicating that the following line is used to set up your working directory. The project folder would now be consider the root directory.\n\n\n\n\n\n\n# Author: Johan S. Sáenz\n# Email: johan.saenzmedina@uni-hohenheim.de\n# info: script to create a barplot\n\n# Setting working directory\nsetwd(\"/Users/sebastiansaenz/Documents/github/MicroTutorials/project\")\n\n\nInstalling and loading libraries\n\nR has several pre-build functions but other packages created by the community can be use as long as they are install and load. Now you can use the function install.packages() to install the packages that we would need for our analysis. This function should be use only once, because after the installation, the package will be available to be load even after closing the software. On the other hand, the function library() must be use every time a new R session is initiate. After installation you can comment out the #install.packages(\"tidyverse\"). The longer you work in R, more new packages you will add to your collection.\n\n# Author: Johan S. Sáenz\n# Email: johan.saenzmedina@uni-hohenheim.de\n# info: script to create a barplot\n\n# Setting working directory\nsetwd(\"/Users/sebastiansaenz/Documents/github/MicroTutorials/project\")\n\n# install libraries\n#install.packages(\"tidyverse\")\n\n# load libraries\nlibrary(tidyverse)\n\n\nLoad files\n\nFinally, you should load the files that you are going to use specifically in this script. For this we can use two functions, one pre-build in R (read.table()) and one from the Tidyverse package (read_tsv()). There are several function to load files in the R environment, some of them with broad purposes but also some for specific tasks. Lets clarify some things:\n\n\nThe arrow (&lt;-) indicates that everything on the right would be store in the object on the left. After running this code, you will see that the left object is stored in the environment. You could run the code without assigning the function to an object, however this would not be store in the environment.\nThe name of the object (e.g metadata) is short, meaningful and does not contain spaces.\nThe name of the file is given inside “quotation” and additionally the complete path of the file is written. Remember that in this case project is our root directory, so wee need to declare the path including the rawdata folder.\nDifferent functions have different arguments. For example the read.table() needs the arguments header (assign the first row as header) and sep (declare how is the data frame separate: coma, space, tabs etc), otherwise the data frame will not load correctly. On the other had, read_tsv() is a specific function for loading files that are separate by tabs and the first row is the header, so it does not need any extra argument.\n\n# Load files\nmetadata &lt;- read.table(file = \"rawdata/metadata_metapro.txt\",\n                       header = TRUE,\n                       sep = \"\\t\") #separation of columns by tabs\n\nsummary_file &lt;- read_tsv(file = \"rawdata/project/rawdata/summary.txt\")\nAt the end you can see that your script is accumulating code so do not forget to save it. Next time you open it, you only need to run it and you would be ready to start the analysis and wrangling of your data. The set up of your environment can get very complex because you can add more libraries, assign colours palettes to object, add new fonts and even creating whole themes (size, colours, fonts, scales) to standardize all your plots. 🙀"
  },
  {
    "objectID": "posts/functions/functions.html",
    "href": "posts/functions/functions.html",
    "title": "R functions",
    "section": "",
    "text": "A function is a set of arguments or commands organized together to perform a specific task. R has a large number of pre installed in-built functions, however the user can create its own functions or install new ones from available packages. For example, the library Tidyverse is a collection of eight different packages functions.\nWhat are the different parts of a function?\n\nFunction Name − This is the actual name of the function. It is stored in R environment as an object.\nArguments − An argument is an option that modify the default behaviour of the function. When a function is invoked, you pass a specific value to the argument. Arguments are optional, that means that functions can be use with no arguments.\nFunction Body − The function body contains all the code that defines what the function does.\n\nfunction_name &lt;- function(arg_1, arg_2, …) {\n   Function_body \n}\nLets write a simple function to convert cm to meters. Affter running the function with the value 100, we get the result in meters.\nIt is not common for beginers to write functions as we tend to use those pre-build in R or from other packages. However, learning to write function is important as we can solve some specific task.\n\n#This function convert cm values to meters.\ncm_to_meters &lt;- function(cm) { \n  cm / 100\n}\n\ncm_to_meters(100)\n\n[1] 1\n\n\nThe following list compile several functions, pre-build or from the Tidyverse package, that I usually use during microbiome data wrangling. Be aware that most of the information about the functions was taken from R-help and documentation. If you want to use the help function, write the question mark symbol before the function name (e. g ?setwd()).\n\n\nGet or Set Working Directory\nsetwd() is used to set the working directory for the current R session. The selected directory would be consider the root folder.\nExample:\nsetwd(\"documents/project\")\nInstall and load libraries\ninstall.packages() Download and install packages from CRAN-like repositories or from local files. This function must be use once if the require package is not installed.\nlibrary() Load pre-install packages. This function must be use every time a new session starts\nExample:\ninstall.packages(\"Tidyverse\")\nlibrary(Tidyverse)\n\n\n\nread.table()Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file.\nread_tsv() and read_csv() are special cases of the more general read_delim(). They’re useful for reading the most common types of flat file data, comma separated values and tab separated values, respectively.\nExample:\nread.table(file = \"documents/data.txt\", header = TRUE, sep = \"\\t\")\n\n\n\nR can also be use as a calculator, it is more powerful than that, as many arithmetic function are pre-built in the software. In this way, you can used arithmetic operators like +, -, *, to perform arithmetic calculations.\n\n\n\nOperator\nOperation\nOutput\n\n\n\n\nx+y\nAddition\n15\n\n\nx – y\nSubtraction\n5\n\n\nx * y\nMultiplication\n50\n\n\nx / y\nDivision\n2\n\n\nx ^ y\nExponent\n10^5\n\n\nx %% y\nModulus\n0\n\n\n\nYou can also use logical operators to perform boolean operation.\n\n\n\n!\n–\nNOT\n\n\n\n\n&\n–\nAND (Element wise)\n\n\n&&\n–\nAND\n\n\n|\n–\nOR (Element wise)\n\n\n||\n–\nOR\n\n\n!\n–\nNOT\n\n\n\nAdditional, relational operators can be used to compare two values or variables.\n\n\n\nGreater than\nx&gt;y\nOutput: TRUE\n\n\n\n\nLess than\nx&lt;y\nOutput: FALSE\n\n\nGreater than and equal to\nx&gt;=y\nOutput: TRUE\n\n\nLess than and equal to\nx&lt;=y\nOutput: FALSE\n\n\nEqual to\nx==y\nOutput: FALSE\n\n\nNot equal to\nx!=y\nOutput: TRUE\n\n\n\nHowever, R also has more complex pre-build function that you can use to transform or create variable, Some of the most common function are:\nmean() generic function for the (trimmed) arithmetic mean.\nsum() returns the sum of all the values present in its arguments.\nsd() this function computes the standard deviation of the values in x. If na.rm is TRUE then missing values are removed before computation proceeds.\nmax(), min() returns the (regular or parallel) maxima and minima of the input values.\n\n\n\nggplot2 is a system for creating graphics, based on The Grammar of Graphics. You provide the data as a dataframe, tell ggplot2 how to map variables to aesthetics, what graphical geometries to use, and it takes care of the details.\nggplot() initializes a ggplot object. It can be used to declare the input data frame for a graphic and to specify the set of plot aesthetics intended to be common throughout all subsequent layers unless specifically overridden.\ngeom functions\nThere are different functions to represent geometric figures or more specifically types of graphs. The most common type of figures are: geom_bar(), geom_boxplot(), geom_line(), geom_point(). You can check all types here ggplot2\n\n\n\n\n\nLets take barplots as examples. There are two types of bar charts: geom_bar() and geom_col(). geom_bar() makes the height of the bar proportional to the number of cases in each group (or if the weight aesthetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use geom_col() instead.\nScale functions\nThere are different functions to represent the scales of the data in the plots using R. Those functions can be applied to the x or y axis. The most common type of scales are: scale_x_continuous(), scale_y_continuous(), scale_x_discrete(), scale_y_discrete(), scale_x_log10(), scale_y_log10().\nThe function scale_y_continuous() can be use to format the y-axis of a continuous variable. For example you can introduce breaks and limits.\nlabs() Modify axis, legend, and plot labels. Good labels are critical for making your plots accessible to a wider audience. Always ensure the axis and legend labels display the full variable name. Use the plot title and subtitle to explain the main findings. It’s common to use the caption to provide information about the data source. tag can be used for adding identification tags to differentiate between multiple plots.\nThemes\ntheme() is a powerful way to customize the non-data components of your plots: i.e. titles, labels, fonts, background, gridlines, and legends. Themes can be used to give plots a consistent customized look. ggplot has several pre-build themes like: theme_classic() and theme_minimal()\nExample:\nggplot(data = data_clean) +\n  geom_boxplot(x = groups,\n               y = abundance) +\n  scale_y_continuous(limits = c(0, 0),\n                     breaks = seq(0, 100, 10)) +\n  labs(y = \"Relative abundance (%)\",\n       x = \"Treatment\") +\n  theme_classic()\n\n\n\nrename() changes the names of individual variables using new_name = old_name syntax.\nseparate() can separate a character column into multiple columns with a regular expression or numeric locations.\nselect() select (and optionally rename) variables in a data frame, using a concise mini-language that makes it easy to refer to variables based on their name (e.g. a:f selects all columns from a on the left to f on the right). You can also use predicate functions like is.numeric to select variables based on their properties.\nData frames can be joined based on different vareiables that they shared. The mutating joins add columns from y to x, matching rows based on the keys:\n\ninner_join(): includes all rows in x and y.\nleft_join(): includes all rows in x.\nright_join(): includes all rows in y.\nfull_join(): includes all rows in x or y.\n\nIf a row in x matches multiple rows in y, all the rows in y will be returned once for each matching row in x.\n\nfilter() function is used to subset a data frame, retaining all rows that satisfy your conditions. To be retained, the row must produce a value of TRUE for all conditions. Note that when a condition evaluates to NA the row will be dropped. Conditions acan be stablish using the logical and relational operators.\npivot_longer() “lengthens” data, increasing the number of rows and decreasing the number of columns. The inverse transformation is pivot_wider()\ngroup_by() takes an existing data frame and converts it into a grouped data frame where operations are performed “by group”. ungroup() removes grouping. group_by() is usually cvombined with summarize() and mutate().\nsummarize() creates a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input. It will contain one column for each grouping variable and one column for each of the summary statistics that you have specified.\nmutate() adds new variables and preserves existing ones; transmute() adds new variables and drops existing ones. New variables overwrite existing variables of the same name. Variables can be removed by setting their value to NULL."
  },
  {
    "objectID": "posts/functions/functions.html#set-up-functions",
    "href": "posts/functions/functions.html#set-up-functions",
    "title": "R functions",
    "section": "",
    "text": "Get or Set Working Directory\nsetwd() is used to set the working directory for the current R session. The selected directory would be consider the root folder.\nExample:\nsetwd(\"documents/project\")\nInstall and load libraries\ninstall.packages() Download and install packages from CRAN-like repositories or from local files. This function must be use once if the require package is not installed.\nlibrary() Load pre-install packages. This function must be use every time a new session starts\nExample:\ninstall.packages(\"Tidyverse\")\nlibrary(Tidyverse)"
  },
  {
    "objectID": "posts/functions/functions.html#load-files-functions",
    "href": "posts/functions/functions.html#load-files-functions",
    "title": "R functions",
    "section": "",
    "text": "read.table()Reads a file in table format and creates a data frame from it, with cases corresponding to lines and variables to fields in the file.\nread_tsv() and read_csv() are special cases of the more general read_delim(). They’re useful for reading the most common types of flat file data, comma separated values and tab separated values, respectively.\nExample:\nread.table(file = \"documents/data.txt\", header = TRUE, sep = \"\\t\")"
  },
  {
    "objectID": "posts/functions/functions.html#arithmetic-functions",
    "href": "posts/functions/functions.html#arithmetic-functions",
    "title": "R functions",
    "section": "",
    "text": "R can also be use as a calculator, it is more powerful than that, as many arithmetic function are pre-built in the software. In this way, you can used arithmetic operators like +, -, *, to perform arithmetic calculations.\n\n\n\nOperator\nOperation\nOutput\n\n\n\n\nx+y\nAddition\n15\n\n\nx – y\nSubtraction\n5\n\n\nx * y\nMultiplication\n50\n\n\nx / y\nDivision\n2\n\n\nx ^ y\nExponent\n10^5\n\n\nx %% y\nModulus\n0\n\n\n\nYou can also use logical operators to perform boolean operation.\n\n\n\n!\n–\nNOT\n\n\n\n\n&\n–\nAND (Element wise)\n\n\n&&\n–\nAND\n\n\n|\n–\nOR (Element wise)\n\n\n||\n–\nOR\n\n\n!\n–\nNOT\n\n\n\nAdditional, relational operators can be used to compare two values or variables.\n\n\n\nGreater than\nx&gt;y\nOutput: TRUE\n\n\n\n\nLess than\nx&lt;y\nOutput: FALSE\n\n\nGreater than and equal to\nx&gt;=y\nOutput: TRUE\n\n\nLess than and equal to\nx&lt;=y\nOutput: FALSE\n\n\nEqual to\nx==y\nOutput: FALSE\n\n\nNot equal to\nx!=y\nOutput: TRUE\n\n\n\nHowever, R also has more complex pre-build function that you can use to transform or create variable, Some of the most common function are:\nmean() generic function for the (trimmed) arithmetic mean.\nsum() returns the sum of all the values present in its arguments.\nsd() this function computes the standard deviation of the values in x. If na.rm is TRUE then missing values are removed before computation proceeds.\nmax(), min() returns the (regular or parallel) maxima and minima of the input values."
  },
  {
    "objectID": "posts/functions/functions.html#ggplot2-functions",
    "href": "posts/functions/functions.html#ggplot2-functions",
    "title": "R functions",
    "section": "",
    "text": "ggplot2 is a system for creating graphics, based on The Grammar of Graphics. You provide the data as a dataframe, tell ggplot2 how to map variables to aesthetics, what graphical geometries to use, and it takes care of the details.\nggplot() initializes a ggplot object. It can be used to declare the input data frame for a graphic and to specify the set of plot aesthetics intended to be common throughout all subsequent layers unless specifically overridden.\ngeom functions\nThere are different functions to represent geometric figures or more specifically types of graphs. The most common type of figures are: geom_bar(), geom_boxplot(), geom_line(), geom_point(). You can check all types here ggplot2\n\n\n\n\n\nLets take barplots as examples. There are two types of bar charts: geom_bar() and geom_col(). geom_bar() makes the height of the bar proportional to the number of cases in each group (or if the weight aesthetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use geom_col() instead.\nScale functions\nThere are different functions to represent the scales of the data in the plots using R. Those functions can be applied to the x or y axis. The most common type of scales are: scale_x_continuous(), scale_y_continuous(), scale_x_discrete(), scale_y_discrete(), scale_x_log10(), scale_y_log10().\nThe function scale_y_continuous() can be use to format the y-axis of a continuous variable. For example you can introduce breaks and limits.\nlabs() Modify axis, legend, and plot labels. Good labels are critical for making your plots accessible to a wider audience. Always ensure the axis and legend labels display the full variable name. Use the plot title and subtitle to explain the main findings. It’s common to use the caption to provide information about the data source. tag can be used for adding identification tags to differentiate between multiple plots.\nThemes\ntheme() is a powerful way to customize the non-data components of your plots: i.e. titles, labels, fonts, background, gridlines, and legends. Themes can be used to give plots a consistent customized look. ggplot has several pre-build themes like: theme_classic() and theme_minimal()\nExample:\nggplot(data = data_clean) +\n  geom_boxplot(x = groups,\n               y = abundance) +\n  scale_y_continuous(limits = c(0, 0),\n                     breaks = seq(0, 100, 10)) +\n  labs(y = \"Relative abundance (%)\",\n       x = \"Treatment\") +\n  theme_classic()"
  },
  {
    "objectID": "posts/functions/functions.html#tidyverse-functions",
    "href": "posts/functions/functions.html#tidyverse-functions",
    "title": "R functions",
    "section": "",
    "text": "rename() changes the names of individual variables using new_name = old_name syntax.\nseparate() can separate a character column into multiple columns with a regular expression or numeric locations.\nselect() select (and optionally rename) variables in a data frame, using a concise mini-language that makes it easy to refer to variables based on their name (e.g. a:f selects all columns from a on the left to f on the right). You can also use predicate functions like is.numeric to select variables based on their properties.\nData frames can be joined based on different vareiables that they shared. The mutating joins add columns from y to x, matching rows based on the keys:\n\ninner_join(): includes all rows in x and y.\nleft_join(): includes all rows in x.\nright_join(): includes all rows in y.\nfull_join(): includes all rows in x or y.\n\nIf a row in x matches multiple rows in y, all the rows in y will be returned once for each matching row in x.\n\nfilter() function is used to subset a data frame, retaining all rows that satisfy your conditions. To be retained, the row must produce a value of TRUE for all conditions. Note that when a condition evaluates to NA the row will be dropped. Conditions acan be stablish using the logical and relational operators.\npivot_longer() “lengthens” data, increasing the number of rows and decreasing the number of columns. The inverse transformation is pivot_wider()\ngroup_by() takes an existing data frame and converts it into a grouped data frame where operations are performed “by group”. ungroup() removes grouping. group_by() is usually cvombined with summarize() and mutate().\nsummarize() creates a new data frame. It will have one (or more) rows for each combination of grouping variables; if there are no grouping variables, the output will have a single row summarising all observations in the input. It will contain one column for each grouping variable and one column for each of the summary statistics that you have specified.\nmutate() adds new variables and preserves existing ones; transmute() adds new variables and drops existing ones. New variables overwrite existing variables of the same name. Variables can be removed by setting their value to NULL."
  },
  {
    "objectID": "posts/installation/installation.html",
    "href": "posts/installation/installation.html",
    "title": "R Installation",
    "section": "",
    "text": "R is a free programming language and software environment that is broadly use for data wrangling, statistical computing and graphical representation. It can be run on a wide variety of UNIX platforms, Windows and MacOS.\nThe R project is a collaborative effort between the R developers and its community. Every R user can develop its own packages to run in the R environment and solve different problems or necessities. R is quite powerful but it can be challenging to use. Because of that we used R-studio, which is an integrated development environment (IDE). This IDE includes a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging, and workspace management.\nPlease follow the following guide to install R and R-studio.\n\n\n\nGo to The R project website and click on download R.\n\n\n\n\n\n\n\nNext, select a repository that is preferably located in the country that you are currently residing.\n\n\n\n\n\n\n\nAfter, select the the operating system (OS) that you have in your machine. For the following example, I will show the steps for the windows OS, however the instructions for the other OS are quite similar.\n\n\n\n\n\n\n\nHere you can click on “install R for the first time” or “base”.\n\n\n\n\n\n\n\nI usually do not install the last version available, in this case R-4.3.0. I prefer to to install a previous version, which would not have compatibility issues with some of the libraries or packages that I currently use. Go and click on “Previous releases”\n\n\n\n\n\n\n\nSelect the version R-4-2.2, which have been stable during the last year. Go ahead and download the .exe file and install it. After, follow the basic installation. I recommend you to install R in English not in German. If you are in a MacOS machine be aware that there are different versions for the intel-based Macs and arm-based macs.\n\n\n\n\n\n\n\n\n\n\nAfter a successful R installation, we need to install the RStudio IDE. Go to R-studio website and click on “Donwlad RStudio desktop”. You can download the last version available of RStuio, follow the basic installation. I recommend you to install RStudio in English not in German.\n\n\n\n\n\n\n\nFinally, open RStudio and check in the console that the correct version of R is running under the hood.\n\nNow Enjoy!!!!!!!!! 😀"
  },
  {
    "objectID": "posts/installation/installation.html#installing-r",
    "href": "posts/installation/installation.html#installing-r",
    "title": "R Installation",
    "section": "",
    "text": "Go to The R project website and click on download R.\n\n\n\n\n\n\n\nNext, select a repository that is preferably located in the country that you are currently residing.\n\n\n\n\n\n\n\nAfter, select the the operating system (OS) that you have in your machine. For the following example, I will show the steps for the windows OS, however the instructions for the other OS are quite similar.\n\n\n\n\n\n\n\nHere you can click on “install R for the first time” or “base”.\n\n\n\n\n\n\n\nI usually do not install the last version available, in this case R-4.3.0. I prefer to to install a previous version, which would not have compatibility issues with some of the libraries or packages that I currently use. Go and click on “Previous releases”\n\n\n\n\n\n\n\nSelect the version R-4-2.2, which have been stable during the last year. Go ahead and download the .exe file and install it. After, follow the basic installation. I recommend you to install R in English not in German. If you are in a MacOS machine be aware that there are different versions for the intel-based Macs and arm-based macs."
  },
  {
    "objectID": "posts/installation/installation.html#r-studio-installation",
    "href": "posts/installation/installation.html#r-studio-installation",
    "title": "R Installation",
    "section": "",
    "text": "After a successful R installation, we need to install the RStudio IDE. Go to R-studio website and click on “Donwlad RStudio desktop”. You can download the last version available of RStuio, follow the basic installation. I recommend you to install RStudio in English not in German.\n\n\n\n\n\n\n\nFinally, open RStudio and check in the console that the correct version of R is running under the hood.\n\nNow Enjoy!!!!!!!!! 😀"
  }
]